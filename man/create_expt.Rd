% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expt.R
\name{create_expt}
\alias{create_expt}
\title{Wrap bioconductor's expressionset to include some extra information.}
\usage{
create_expt(
  metadata = NULL,
  gene_info = NULL,
  count_dataframe = NULL,
  sanitize_rownames = TRUE,
  sample_colors = NULL,
  title = NULL,
  notes = NULL,
  include_type = "all",
  countdir = NULL,
  include_gff = NULL,
  file_column = "file",
  id_column = NULL,
  savefile = NULL,
  low_files = FALSE,
  handle_na = "drop",
  researcher = "elsayed",
  study_name = NULL,
  file_type = NULL,
  annotation_name = "org.Hs.eg.db",
  tx_gene_map = NULL,
  feature_type = "gene",
  ignore_tx_version = TRUE,
  keep_underscore = TRUE,
  ...
)
}
\arguments{
\item{metadata}{Comma separated file (or excel) describing the samples with
information like condition, batch, count_filename, etc.}

\item{gene_info}{Annotation information describing the rows of the data set,
this often comes from a call to import.gff() or biomart or organismdbi.}

\item{count_dataframe}{If one does not wish to read the count tables from the
filesystem, they may instead be fed as a data frame here.}

\item{sanitize_rownames}{Clean up weirdly written gene IDs?}

\item{sample_colors}{List of colors by condition, if not provided it will
generate its own colors using colorBrewer.}

\item{title}{Provide a title for the expt?}

\item{notes}{Additional notes?}

\item{include_type}{I have usually assumed that all gff annotations should be
used, but that is not always true, this allows one to limit to a specific
annotation type.}

\item{countdir}{Directory containing count tables.}

\item{include_gff}{Gff file to help in sorting which features to keep.}

\item{file_column}{Column to use in a gene information dataframe for}

\item{id_column}{Column which contains the sample IDs.}

\item{savefile}{Rdata filename prefix for saving the data of the resulting
expt.}

\item{low_files}{Explicitly lowercase the filenames when searching the
filesystem?}

\item{handle_na}{How does one wish to deal with NA values in the data?}

\item{researcher}{Used to make the creation of gene sets easier,
set the researcher tag.}

\item{study_name}{Ibid, but set the study tag.}

\item{file_type}{Explicitly state the type of files containing the
count data.  I have code which autodetects the method used to
import count data, this short-circuits it.}

\item{annotation_name}{Ibid, but set the orgdb (or other annotation) instance.}

\item{tx_gene_map}{Dataframe of transcripts to genes, primarily for
tools like salmon.}

\item{feature_type}{Make explicit the type of feature used so it
may be printed later.}

\item{ignore_tx_version}{When using tximport, one may strictly
match the transcript versions, or not.}

\item{keep_underscore}{Sanitize out underscores from the columns?}

\item{...}{More parameters are fun!}
}
\value{
experiment an expressionset
}
\description{
Note: You should just be using create_se().  It does everything the
expt does, but better.
}
\details{
The primary innovation of this function is that it will check the metadata
for columns containing filenames for the count tables, thus hopefully making
the collation and care of metadata/counts easier.  For example, I have some
data which has been mapped against multiple species.  I can use this function
and just change the file_column argument to pick up each species' tables.
}
\examples{
## The first task for most of my functions is to create one of the multi-dimensional
## data structures containing metadata, annotations, and expression values.
## I have a couple of functions which generate these using extant, publicly available data.

## My expt data structure is bad.
## I created it when I was first learning R because I wanted an
## expressionset with extra flexibility.  At the time I either did not
## know about the SummarizedExperiment or it did not exist.
## In either case, much of my codebase grew around this data
## structure.  In my most recent changes I have almost completely
## removed any dependencies on it and think that very soon I will be
## able to completely remove it and have just a couple of functions
## which translate my old expts to SEs.

## Until I complete that, here are a few examples of how I used them;
## if my recent work was successful, all of these tasks may be
## similarly (better) performed using SE.

pombe_expt <- make_pombe_expt()

## The following includes a few ways to create an expt given various
## combinations of annotation information, metadata, and expression
## data sources.

## In this first instance, I am using an extant set of dataframes from
## an old experiment comparing Streptococcus pyogenes group A in
## different media over time.

cdm_expt_rda <- system.file("share", "cdm_expt.rda", package = "hpgldata")
load(file = cdm_expt_rda)
head(cdm_counts)
head(cdm_metadata)
## The gff file has differently labeled locus tags than the count tables, also
## the naming standard changed since this experiment was performed, therefore I
## downloaded a new gff file.
example_gff <- system.file("share", "gas.gff", package = "hpgldata")
gas_gff_annot <- load_gff_annotations(example_gff)
rownames(gas_gff_annot) <- make.names(gsub(pattern = "(Spy)_", replacement = "\\\\1",
                                           x = gas_gff_annot[["locus_tag"]]), unique = TRUE)
mgas_expt <- create_expt(metadata = cdm_metadata, gene_info = gas_gff_annot,
                         count_dataframe = cdm_counts)
head(pData(mgas_expt))

## The following example is from a denovo transcriptome assembly using
## RNA collected from Solanum betaceum, the tree tomato (tamarillo).
## An example using count tables referenced in the metadata.
## This is more indicative of how I like to create these data
## structures: I like to have a column in the metadata containing
## links to the various files which are important in the
## preprocessing -- notably the count tables from salmon/hisat/etc.
sb_annot <- system.file("share", "sb", "trinotate_head.csv.xz", package = "hpgldata")
sb_annot <- load_trinotate_annotations(trinotate = sb_annot)
sb_annot <- as.data.frame(sb_annot)
rownames(sb_annot) <- make.names(sb_annot[["transcript_id"]], unique = TRUE)
sb_annot[["rownames"]] <- NULL
sb_data <- system.file("share", "sb", "preprocessing.tar.xz", package = "hpgldata")
untarred <- utils::untar(tarfile = sb_data)
sb_expt <- create_expt(metadata = "preprocessing/kept_samples.xlsx",
                       gene_info = sb_annot)
dim(exprs(sb_expt))
dim(fData(sb_expt))
pData(sb_expt)

## See how many genes have counts less/greater than some threshold.
feat_gt_100 <- features_greater_than(pombe_expt, cutoff = 100)
## Print the number of genes with > 100 counts on a per-sample basis.
barplot(feat_gt_100[["number"]])

## Extract genes which are observed in only some conditions with an
## arbitrary threshold
solo_features <- features_in_single_condition(
  pombe_expt, factor = "condition")
## Print the number of genes unique to each condition (> 2/sample)
solo_list <- solo_features[["solo_this"]]
solo_numbers <- lapply(solo_list, FUN=length)
barplot(as.numeric(solo_numbers))

## Extract the mean/median value/gene with respect to a metadata
## factor.
means_by_cond <- median_by_factor(pombe_expt, fun = "mean")
## This function returns a list with a few putatively interesting
## pieces of information.  The following is a boxplot of the coefficient
## of variance with respect to condition by gene.
## Thus we can see that the samples are at their plastic in the wt.15
## and wt.60 points.
plot_boxplot(means_by_cond[["cvs"]])

## Remove genes which are problematic due to their semantic identity.
## We primarily use this to get rid of multi-gene families which are
## super annoying in our parasites.
## In the following example, let us just get rid of the genes with
## 'non-coding' in their descriptions.
pombe_filtered <- semantic_expt_filter(pombe_expt, semantic = "non-coding")
pombe_filtered

## Subset an expt based on arbitrary expressions.
## This is primarily used in pipelines to separate samples in
## complex/large experiments.
## In the following example I am pulling the 0,30 minute samples and
## then dropping any samples which have less than 6,300 genes. (which
## is 1 of them)
pombe_smaller <- pombe_expt \%>\%
  subset_expt(subset = "minute == 30| minute == 0") \%>\%
  subset_expt(nonzero = 6300)
pombe_smaller

## In a recent experiment, we had a series of wild-type samples which
## were a negative control and at least in theory it would be nice to
## literally subtract any counts observed in those samples from the
## other samples in the experiment and then only consider the genes
## which are still positive.
## In its current state, subtract_expt is dumb.
## pombe_half <- pombe_expt
## half_expression <- exprs(pombe_half) / 2
## exprs(pombe_half) <- half_expression

## Add coeficients of variance to an expressionset.
## This also adds a per-gene proportion of variance, variance, stdev,
## median, iqrs along with the CV.
pombe_expt <- variance_expt(pombe_expt)
head(fData(pombe_expt))

output_file <- "pombe_smaller.xlsx"
written <- write_expt(pombe_smaller, excel = output_file)
if (file.exists(output_file)) {
  removed <- file.remove(output_file)
}
 ## There are lots of other ways to use this, for example:
 \dontrun{
  new_experiment <- create_expt(metadata = "some_csv_file.csv", gene_info = gene_df)
  ## Remember that this depends on an existing data structure of gene annotations.
  meta <- extract_metadata("some_supplementary_materials_xls_file_I_downloaded.xls")
  another_expt <- create_expt(metadata = meta, gene_info = annotations, count_dataframe = df_I_downloaded)
 }
}
\seealso{
[Biobase] [cdm_expt_rda] [example_gff] [sb_annot] [sb_data] [extract_metadata()]
 [set_expt_conditions()] [set_expt_batches()] [set_expt_samplenames()] [subset_expt()]
 [set_expt_colors()] [set_expt_genenames()] [tximport] [load_annotations()]
}
